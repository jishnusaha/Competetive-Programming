
int n,r;
int combination_collection[50],combination[50];
bool taken[50];
int c=0;
void combination_generator(int idx=0,int p=0) ///must assign false to the array taken before calling this function
{
    if(idx==r-1)
    {
        for(int j=p;j<n;j++)
        {
            for(int i=0;i<idx;i++ )
            {
                cout << combination_collection[i] << ' ';
            }
            c++;
            cout << combination[j] << endl;;

        }
        return;
    }
    for(int i=p;i<n &&  (n-i)>=(r-idx);i++)
    {
        //(n-i)>=(r-idx) //optimization
        //how much left to take >=how much have to be taken
        combination_collection[idx]=combination[i];
        combination_generator(idx+1,i+1);
    }
}

int main()
{
    int t;
    cin >> t;
    while(t--)
    {
        cin >> n >> r;
        loop(0,n-1)
        {
            cin >> combination[l];
            taken[l]=false;
        }
        c=0;
        combination_generator();
        cout << "total combination : " << c << endl;

    }
}